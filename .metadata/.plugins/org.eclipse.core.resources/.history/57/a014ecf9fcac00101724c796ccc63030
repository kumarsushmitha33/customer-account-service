package customer.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Collections;

@Component
public class JwtFilter extends OncePerRequestFilter {

    @Autowired
    private JwtUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        String header = request.getHeader("Authorization");

        try {
            if (header != null && header.startsWith("Bearer ")) {
                String token = header.substring(7);

                if (jwtUtil.validateToken(token)) {
                    String username = jwtUtil.extractUsername(token);
                    String role = jwtUtil.extractRole(token); // e.g. "ADMIN" or "USER"

                    var authorities = role == null
                            ? Collections.emptyList()
                            : java.util.List.of(new SimpleGrantedAuthority("ROLE_" + role));

                    var auth = new UsernamePasswordAuthenticationToken(username, null, authorities);
                    auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    SecurityContextHolder.getContext().setAuthentication(auth);
                }
            }
            // ✅ Continue filter chain only if no exception
            filterChain.doFilter(request, response);
        } 
        catch (io.jsonwebtoken.ExpiredJwtException e) {
            sendError(response, HttpServletResponse.SC_UNAUTHORIZED, "Token expired");
        } 
        catch (io.jsonwebtoken.security.SignatureException e) {
            sendError(response, HttpServletResponse.SC_FORBIDDEN, "Invalid JWT signature");
        } 
        catch (io.jsonwebtoken.MalformedJwtException e) {
            sendError(response, HttpServletResponse.SC_BAD_REQUEST, "Malformed JWT token");
        } 
        catch (Exception e) {
            sendError(response, HttpServletResponse.SC_FORBIDDEN, "Invalid token");
        }
    }

    // ✅ Helper to keep code clean
    private void sendError(HttpServletResponse response, int status, String message) throws IOException {
        response.setStatus(status);
        response.setContentType("application/json");
        response.getWriter().write("{\"error\":\"" + message + "\",\"status\":" + status + "}");
        response.getWriter().flush();
    }
}