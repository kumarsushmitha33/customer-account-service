package customer.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Collections;

@Component
public class JwtFilter extends OncePerRequestFilter {

    @Autowired
    private JwtUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        String header = request.getHeader("Authorization");

        try {
            if (header != null && header.startsWith("Bearer ")) {
                String token = header.substring(7);

                if (jwtUtil.validateToken(token)) {
                    String username = jwtUtil.extractUsername(token);

                    UsernamePasswordAuthenticationToken auth =
                            new UsernamePasswordAuthenticationToken(username, null, Collections.emptyList());
                    auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                    SecurityContextHolder.getContext().setAuthentication(auth);
                }
            }
        }
        catch (io.jsonwebtoken.ExpiredJwtException e) {
            // üïí Token expired
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Token expired ‚Äî please log in again");
            return;
        }
        catch (io.jsonwebtoken.security.SignatureException e) {
            // ‚ùå Signature tampered
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid JWT signature ‚Äî token may be modified");
            return;
        }
        catch (io.jsonwebtoken.MalformedJwtException e) {
            // üß© Token format invalid
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Malformed JWT token");
            return;
        }
        catch (Exception e) {
            // üîí Generic invalid token case
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid token");
            return;
        }

        // ‚úÖ Continue the filter chain only if token is valid or not required
        filterChain.doFilter(request, response);
    }
}