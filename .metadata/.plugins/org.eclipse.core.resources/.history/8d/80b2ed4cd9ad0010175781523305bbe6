package account.security;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.security.SignatureException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Collections;

@Component
public class JwtFilter extends OncePerRequestFilter {

    @Autowired
    private JwtUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain chain)
            throws ServletException, IOException {

        String header = request.getHeader("Authorization");

        if (header == null || !header.startsWith("Bearer ")) {
            // No token → just move on
            chain.doFilter(request, response);
            return;
        }

        String token = header.substring(7);

        try {
            // ✅ Validate JWT
            if (jwtUtil.validateToken(token)) {
                String username = jwtUtil.extractUsername(token);

                UsernamePasswordAuthenticationToken auth =
                        new UsernamePasswordAuthenticationToken(username, null, Collections.emptyList());
                auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(auth);

                // Proceed if token is valid
                chain.doFilter(request, response);
                return;
            }

        } catch (ExpiredJwtException e) {
            writeError(response, HttpStatus.UNAUTHORIZED, "JWT token has expired. Please log in again.");
            return;
        } catch (SignatureException e) {
            writeError(response, HttpStatus.FORBIDDEN, "Invalid JWT signature.");
            return;
        } catch (MalformedJwtException e) {
            writeError(response, HttpStatus.BAD_REQUEST, "Malformed JWT token.");
            return;
        } catch (JwtException e) {
            writeError(response, HttpStatus.UNAUTHORIZED, "Invalid JWT token.");
            return;
        } catch (Exception e) {
            writeError(response, HttpStatus.INTERNAL_SERVER_ERROR, "Unexpected authentication error.");
            return;
        }
    }

    private void writeError(HttpServletResponse response, HttpStatus status, String message) throws IOException {
        response.setStatus(status.value());
        response.setContentType("application/json");
        response.getWriter().write(String.format("{\"error\":\"%s\",\"status\":%d}", message, status.value()));
        response.getWriter().flush();
    }
}