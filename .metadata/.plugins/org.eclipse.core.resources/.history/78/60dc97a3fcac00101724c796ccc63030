package customer.security;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Collections;

@Component
public class JwtFilter extends OncePerRequestFilter {

    @Autowired
    private JwtUtil jwtUtil;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        String header = request.getHeader("Authorization");

        try {
        	
        	if (header != null && header.startsWith("Bearer ")) {
        	    String token = header.substring(7);

        	    if (jwtUtil.validateToken(token)) {
        	        String username = jwtUtil.extractUsername(token);
        	        String role = jwtUtil.extractRole(token); // e.g. "ADMIN" or "USER"

        	        var authorities = role == null
        	                ? Collections.emptyList()
        	                : java.util.List.of(new SimpleGrantedAuthority("ROLE_" + role));

        	        var auth = new UsernamePasswordAuthenticationToken(username, null, authorities);
        	        auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
        	        SecurityContextHolder.getContext().setAuthentication(auth);
        	    }
//            if (header != null && header.startsWith("Bearer ")) {
//                String token = header.substring(7);
//
//                if (jwtUtil.validateToken(token)) {
//                    String username = jwtUtil.extractUsername(token);
//
//                    UsernamePasswordAuthenticationToken auth =
//                            new UsernamePasswordAuthenticationToken(username, null, Collections.emptyList());
//                    auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
//                    SecurityContextHolder.getContext().setAuthentication(auth);
//                }
//            }
            // Continue only if no exception occurs
            filterChain.doFilter(request, response);
        } 
        catch (io.jsonwebtoken.ExpiredJwtException e) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.setContentType("application/json");
            response.getWriter().write("{\"error\":\"Token expired\",\"status\":401}");
            response.getWriter().flush();
            return; // ‚ùå Stop further filter chain
        } 
        catch (io.jsonwebtoken.security.SignatureException e) {
            response.setStatus(HttpServletResponse.SC_FORBIDDEN);
            response.setContentType("application/json");
            response.getWriter().write("{\"error\":\"Invalid JWT signature\",\"status\":403}");
            response.getWriter().flush();
            return;
        } 
        catch (io.jsonwebtoken.MalformedJwtException e) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.setContentType("application/json");
            response.getWriter().write("{\"error\":\"Malformed JWT token\",\"status\":400}");
            response.getWriter().flush();
            return;
        } 
        catch (Exception e) {
            response.setStatus(HttpServletResponse.SC_FORBIDDEN);
            response.setContentType("application/json");
            response.getWriter().write("{\"error\":\"Invalid token\",\"status\":403}");
            response.getWriter().flush();
            return;
        }
    }
}